-- How many pizza types are there in total?
SELECT COUNT(pizza_type_id) AS total_pizza_types 
FROM pizza_types;

-- Retrieve the total number of orders placed.
SELECT COUNT(order_id) AS total_orders 
FROM orders;

-- Identify the most common pizza size ordered.
SELECT pizzas.size, COUNT(order_details.order_details_id) AS order_count
FROM pizzas
INNER JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC 
LIMIT 1;

-- What is the average number of pizzas ordered per order?
SELECT AVG(quantity) AS average_pizzas_per_order 
FROM order_details;

-- Determine the distribution of orders by hour of the day.
SELECT HOUR(order_time) AS hour, COUNT(order_id) AS frequency_of_orders
FROM orders
GROUP BY hour
ORDER BY frequency_of_orders DESC;

-- Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT AVG(quantity)
FROM (
    SELECT orders.order_date AS date, SUM(order_details.quantity) AS quantity
    FROM orders
    JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY date
) AS daily_quantities;

-- Calculate the total revenue generated from pizza sales.
SELECT SUM(order_details.quantity * pizzas.price) AS total_revenue
FROM order_details 
JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id;

-- Calculate the total revenue rounded to 2 decimal places.
SELECT ROUND(SUM(order_details.quantity * pizzas.price), 2) AS total_revenue
FROM order_details 
JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id;

-- Determine the top 3 most ordered pizza types based on revenue.
SELECT pizza_types.name, SUM(order_details.quantity * pizzas.price) AS revenue
FROM pizza_types
JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;

-- Calculate the percentage contribution of each pizza category to total revenue.
SELECT pizza_types.category, 
       SUM(order_details.quantity * pizzas.price) / (
           SELECT SUM(order_details.quantity * pizzas.price)
           FROM order_details 
           JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id
       ) * 100 AS revenue_percentage
FROM pizza_types
JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY revenue_percentage DESC;

-- Identify the highest-priced pizza.
SELECT pizza_types.name, pizzas.price
FROM pizza_types
INNER JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

-- List the top 5 most ordered pizza types along with their quantities.
SELECT pizza_types.name, SUM(order_details.quantity) AS total_quantity_ordered
FROM pizza_types
INNER JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
INNER JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY total_quantity_ordered DESC
LIMIT 5;

-- Find the total quantity of each pizza category ordered.
SELECT pizza_types.category, SUM(order_details.quantity)
FROM pizza_types
INNER JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizza_types.category;

-- Analyze customer preferences by pizza category. Identify the least and most popular pizza categories.
SELECT pizza_types.category, SUM(order_details.quantity)
FROM pizza_types
INNER JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
INNER JOIN order_details ON pizzas.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY SUM(order_details.quantity);

-- Identify repeat customers based on order frequency.
SELECT order_id, COUNT(order_id)
FROM order_details
GROUP BY order_id
HAVING COUNT(order_id) > 1
ORDER BY COUNT(order_id) DESC;

-- Analyze seasonal variations in pizza orders.
SELECT MONTH(order_date) AS month, COUNT(order_id) AS order_count
FROM orders
GROUP BY month
ORDER BY order_count DESC;

-- Identify the busiest day for orders.
SELECT orders.order_date, SUM(order_details.quantity) AS total_quantity
FROM orders
JOIN order_details ON orders.order_id = order_details.order_id
GROUP BY orders.order_date
ORDER BY total_quantity DESC;

-- Analyze the cumulative revenue generated over time.
SELECT orders.order_date, 
       SUM(order_details.quantity * pizzas.price) AS revenue
FROM order_details
JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id
JOIN orders ON order_details.order_id = orders.order_id
GROUP BY orders.order_date;

-- Now find the cumulative revenue
SELECT order_date, 
       SUM(revenue) OVER (ORDER BY order_date) AS cumulative_revenue
FROM (
    SELECT orders.order_date, 
           SUM(order_details.quantity * pizzas.price) AS revenue
    FROM order_details
    JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id
    JOIN orders ON order_details.order_id = orders.order_id
    GROUP BY orders.order_date
) AS daily_revenues;
